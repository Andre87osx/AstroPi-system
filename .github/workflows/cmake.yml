name: Test compiling KStars AstroPi and dependencies

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ["debian-AstroPi",]
    
    steps:
    - uses: actions/checkout@v2

    - name: Upgrade system terster
      run: sudo apt-get update && sudo apt-get -y upgrade && sudo apt-get install libkf5doctools-dev

    - name: Preparing system prerequisites for KStars AstroPi
      run: |
            sudo apt -y install build-essential cmake git libeigen3-dev libcfitsio-dev zlib1g-dev libindi-dev extra-cmake-modules libkf5plotting-dev libqt5svg5-dev libkf5iconthemes-dev wcslib-dev libqt5sql5-sqlite
            sudo apt -y install libkf5xmlgui-dev kinit-dev libkf5newstuff-dev libkf5notifications-dev libqt5websockets5-dev qtdeclarative5-dev libkf5crash-dev gettext qml-module-qtquick-controls qml-module-qtquick-layouts
            sudo apt -y install libkf5notifyconfig-dev libqt5datavisualization5-dev qt5keychain-dev

    - name: Preparing system prerequisites for INDI AstroPi
      run: | 
            sudo apt -y install libnova-dev libcfitsio-dev libusb-1.0-0-dev libusb-dev zlib1g-dev libgsl-dev build-essential cmake git libjpeg-dev libcurl4-gnutls-dev libtiff-dev
            sudo apt -y install libftdi-dev libgps-dev libraw-dev libdc1394-22-dev libgphoto2-dev libboost-dev libboost-regex-dev librtlsdr-dev liblimesuite-dev libftdi1-dev
            sudo apt -y install ffmpeg libavcodec-dev libavdevice-dev libfftw3-dev libev-dev

        
    - name: Download indilib-AstroPi an configure
      run: bash https://github.com/Andre87osx/AstroPi-system/blob/AstroPi_v1.7-rework/include/test_install.sh
      
    - name: Download StellarSolver
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # StellarSolver 2.0 have issue with KStars AstroPi 3.5.4 v1.5. Use GIT for build tag 1.9
      run: git clone -b 1.9 https://github.com/rlancaste/stellarsolver.git
      
    - name: Configure StellarSolver
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTER=ON ${{github.workspace}}/stellarsolver

    - name: Build StellarSolver
      working-directory: ${{github.workspace}}/build
      run: make -j4

    - name: Install StellarSolver
      working-directory: ${{github.workspace}}/build
      run: sudo make install
      
    - name: Cleaning Build dir
      run: rm -Rf ${{github.workspace}}/build/*
      
    #- name: Configure KStars AstroPi CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #  run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} ${{github.workspace}}/kstars-astropi
     
    #- name: Build KStars AstroPi
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      #working-directory: ${{github.workspace}}/build
      #run: make -j4 && sleep 60s && make -j4

    #- name: Install Kstars AstroPi
      #working-directory: ${{github.workspace}}/build
      # Install all project Kstars AstroPi 
      #run: sudo make install
