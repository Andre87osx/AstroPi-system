name: Test compiling KStars AstroPi and dependencies

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        container: ["debian-AstroPi",]
    
    steps:
    - uses: actions/checkout@v2

    - name: Upgrade system terster
      run: sudo apt-get update && sudo apt-get -y upgrade

    - name: Preparing system prerequisites for KStars AstroPi
      run: |
            sudo apt-add-repository ppa:mutlaqja/ppa
            sudo apt-get -y install build-essential cmake git libeigen3-dev libcfitsio-dev zlib1g-dev libkf5doctools-dev libqt5datavisualization5-dev
            sudo apt-get -y install extra-cmake-modules libkf5plotting-dev libqt5svg5-dev libkf5xmlgui-dev libkf5kio-dev kinit-dev libkf5newstuff-dev 
            sudo apt-get -y install libkf5notifications-dev qtdeclarative5-dev libkf5crash-dev gettext libnova-dev libgsl-dev libraw-dev libkf5notifyconfig-dev wcslib-dev 
            sudo apt-get -y install libqt5websockets5-dev xplanet xplanet-images qt5keychain-dev libsecret-1-dev breeze-icon-theme

    - name: Preparing system prerequisites for INDI AstroPi
      run: | 
            sudo apt -y install libnova-dev libcfitsio-dev libusb-1.0-0-dev libusb-dev zlib1g-dev libgsl-dev build-essential cmake git libjpeg-dev libcurl4-gnutls-dev libtiff-dev
            sudo apt -y install libftdi-dev libgps-dev libraw-dev libgphoto2-dev libboost-dev libboost-regex-dev librtlsdr-dev liblimesuite-dev libftdi1-dev
            sudo apt -y install ffmpeg libavcodec-dev libavdevice-dev libfftw3-dev libev-dev
            
## INDI SETUP >>>>
    - name: Dowload indilib-AstroPi an configure
      run: git clone https://github.com/Andre87osx/indi-AstroPi.git

    - name: Configure indilib-AstroPi
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTER=ON ${{github.workspace}}/indi-AstroPi

    - name: Build indilib-AstroPi
      working-directory: ${{github.workspace}}/build
      run: make -j4

    - name: Install indilib-AstroPi and celean BUILD dir
      working-directory: ${{github.workspace}}/build
      run: |
            sudo make install
            rm -Rf ${{github.workspace}}/build/*
## <<<<

## INDI3rdLIB SETUP >>>>
    #- name: Dowload indilib3rd-AstroPi an configure
    #  run: git clone https://github.com/Andre87osx/indi3rd-AstroPi.git

   # - name: Configure indilib3rd-AstroPi
   #   run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_LIBS=1 -DBUILD_TESTER=ON ${{github.workspace}}/indi3rd-AstroPi

   # - name: Build indilib3rd-AstroPi
   #   working-directory: ${{github.workspace}}/build
   #   run: make -j4

   # - name: Install indilib3rd-AstroPi and celean BUILD dir
   #   working-directory: ${{github.workspace}}/build
   #   run: |
   #         sudo make install
   #         rm -Rf ${{github.workspace}}/build/*
## <<<<

    - name: Download StellarSolver
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      # StellarSolver 2.0 have issue with KStars AstroPi 3.5.4 v1.5. Use GIT for build tag 1.9
      run: git clone -b 1.9 https://github.com/rlancaste/stellarsolver.git
      
    - name: Configure StellarSolver
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DBUILD_TESTING=Off ${{github.workspace}}/stellarsolver

    - name: Build StellarSolver
      working-directory: ${{github.workspace}}/build
      run: make -j4

    - name: Install StellarSolver and celean BUILD dir
      working-directory: ${{github.workspace}}/build
      run: |
            sudo make install
            rm -Rf ${{github.workspace}}/build/*
      
    - name: Configure KStars AstroPi CMake
       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -Wno-error=deprecated -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTING=Off ${{github.workspace}}/kstars-astropi
     
    - name: Build KStars AstroPi
      # Build your program with the given configuration
      # run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      working-directory: ${{github.workspace}}/build
      run: make -j4 && sleep 60s && make -j4

    - name: Install Kstars AstroPi
      working-directory: ${{github.workspace}}/build
      # Install all project Kstars AstroPi 
      run: sudo make install
